

Convert PulseView captures into a highly-compressed file used to replay the signals

mandatory options:
 -i [FILE]   input PulseView '.sr' file
 -o [FILE]   output replay file
or
 -a [FILE]   analyze replay file

non-mandatory options:
 -k [NAME]   pulseview metadata name for input file, default: 'device 1'
 -m [HEX]    mask (in hex) to be applied to the input port, default: 0xffff
 -l [DEC]    number of bits the output signal is shifted to the left, default: 0
 -r [DEC]    number of bits the output signal is shifted to the right, default: 0
 -d [DEC]    force timer clock divider. can be one of the following numbers:
               1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64, default: auto
 -h          display this help and exit
 -v          output version information and exit

Example use:

# replay all content of the 8 channel qa/20s_100mHz.sr capture:
 ./pg -i qa/20s_100mHz.sr -o /tmp/upload.bin
  input file contains 8 channels sampled at 1 MHz, sampling interval of 1.000000 µs, mask is ffff
    number of chunks: 2, total size: 20000000 bytes
   div     min error       max error       avg err         blk     pkts    score  
    1       0.0000us        0.0000us        0.0000us        0       4884    50.5056
    2       0.0000us        0.0000us        0.0000us        0       2444    51.0104
    3       0.0383us        0.1634us        0.0932us        0       1628    11.7589
    4       0.0000us        0.0000us        0.0000us        0       1224    52.0177
    5       0.0625us        0.3125us        0.2000us        0       980     7.8773
    6       0.0284us        0.2785us        0.1477us        0       816     10.0172
    7       0.0141us        0.3266us        0.1488us        0       700     10.4714
    8       0.0000us        0.0000us        0.0000us        0       612     54.0354
    10      0.1250us        0.6250us        0.4500us        0       492     7.5520
    12      0.1533us        0.6535us        0.3727us        0       409     9.0640
    14      0.3266us        0.7018us        0.4113us        0       352     9.7740
    16      0.0000us        0.0000us        0.0000us        0       308     58.0200
    20      0.5000us        1.2500us        0.9500us        0       248     11.1944
    24      0.1136us        1.1141us        0.5906us        0       205     14.0013
    28      0.1130us        1.1136us        0.4906us        0       177     16.2899
    32      1.0000us        1.0000us        0.8000us        0       156     17.2971
    40      0.5000us        2.5000us        1.7000us        0       124     20.6207
    48      0.6130us        2.6141us        1.4906us        0       105     24.3343
    56      0.1130us        2.6125us        1.1906us        0       89      28.7524
    64      3.0000us        3.0000us        2.4000us        0       80      31.4095
  optimal divider: 16
 
# take a 16channel capture in which we're interested in only channel 8 and 9
# mask off (1 << 8 + 1 << 9) == 0x0300, right shift result by 8 and extract the lower 8 bits as signal data
# ./pg -i qa/16ch_1MHz.sr -o /tmp/upload.bin -r 8 -m 0300
  input file contains 16 channels sampled at 1 MHz, sampling interval of 1.000000 µs, mask is fffc
    number of chunks: 1, total size: 1145774 bytes
   div     min error       max error       avg err         blk     pkts    score  
    1       0.0625us        0.0625us        0.0009us        0       1934    48.0058
    2       0.1250us        0.1250us        0.0019us        0       1931    45.7604
    3       0.0267us        0.1871us        0.1077us        0       1930    7.6480
    4       0.2500us        0.2500us        0.0038us        0       1930    41.8584
    5       0.0625us        0.3125us        0.1747us        0       1929    5.2054
    6       0.0001us        0.3748us        0.1930us        0       1929    4.8179
    7       0.0005us        0.4374us        0.2232us        0       1929    4.3044
    8       0.5000us        0.5000us        0.0075us        0       1929    35.8023
    10      0.1250us        0.6250us        0.3529us        0       1929    3.0553
    12      0.1068us        0.7485us        0.4308us        0       1929    2.6685
    14      0.0558us        0.8742us        0.4672us        0       1929    2.5504
    16      1.0000us        1.0000us        0.0150us        0       1929    27.8851
    20      0.2500us        1.2500us        0.7067us        0       1929    2.0358
    24      0.0004us        1.4992us        0.7722us        0       1929    1.9962
    28      0.0022us        1.7494us        0.8900us        0       1929    1.9121
    32      1.0000us        2.0000us        0.5143us        0       1929    2.6689
    40      0.5000us        2.5000us        1.3994us        0       1929    1.7461
    48      0.4271us        2.9941us        1.7232us        0       1929    1.7540
    56      0.0037us        3.4992us        1.7854us        0       1929    1.8613
    64      1.0000us        4.0000us        1.4940us        0       1929    2.0817
  optimal divider: 1

in both cases /tmp/upload.bin has to be uploaded via zmodem to the microcontroller.


